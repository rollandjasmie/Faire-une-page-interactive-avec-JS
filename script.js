/*Fonctionnalit√© 1 :
On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer
 (portant le tag <footer>), tu vas afficher le mot "clique" en console.

Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener
("click", function(){ } car c'est une bonne habitude √† prendre ! üòá*/ 

/*Fonctionnalit√© 1-bis :
Maintenant on va upgrader cette premi√®re fonctionnalit√© :
lorsque l'utilisateur va cliquer sur le footer,
tu vas afficher en console "clic num√©ro x" avec x qui
commence √† 1 et s'incr√©mente de +1 √† chaque clic.*/
let x = 1
var foot = document.getElementsByTagName("footer")[0];
function clique(){
 	let cliq = `clic num√©ro ${x}` 
 	console.log(cliq);
	x = x+ 1
 };
foot.addEventListener("click", clique);
/*Fonctionnalit√© 2 :
On va enfin faire fonctionner ce satan√© 
"Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus.
C'est quoi un "hamburger menu" ? C'est √ßa, ce bouton avec trois lignes horizontales
en haut √† droite de la navbar.

Tu vas faire que si quelqu'un clique sur ce bouton,
l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse.
Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus,
la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader*/
var h = document.getElementsByClassName("navbar-toggler")[0];
let nav = document.getElementById("navbarHeader");
let menu = false
function perd (){ 
	if (menu == false) {
	nav.classList.remove('collapse')
	menu = true}
	else if (menu == true){
	nav.classList.add('collapse');
	menu = false
	}

};
h.addEventListener("click", perd)
/*
Fonctionnalit√© 3 :
√Ä pr√©sent, on va faire cela : si on clique sur le bouton
"Edit" de la premi√®re card, le texte de la card va se mettre
en rouge de fa√ßon irr√©versible (sauf si on recharge la page). √Ä toi de jouer !*/
var edit1 = document.getElementsByClassName("btn btn-sm btn-outline-secondary")[0];
//var ps = 
var text1 = document.getElementsByClassName("card-text")[0];
function red(){
	text1.style.color="red";
};
edit1.addEventListener("click", red);
/*
Fonctionnalit√© 4 :
On va faire quelque chose de similaire √† la fonctionnalit√© 3
mais un peu plus complexe : si on clique sur le bouton "Edit"
de la deuxi√®me card, le texte de la card va se mettre en vert.
Si on re-clique dessus, il redevient comme avant ! Tu l'as compris,
il va falloir que tu cherches comment faire un "toggle" 
sur le style du texte. C'est plus compliqu√© que sur une classe.*/
var edit2 = document.getElementsByClassName("btn btn-sm btn-outline-secondary")[1];
var text2 =	document.getElementsByClassName("card-text")[1];
var text = false

function green(){
	if (text == false) {
		text2.style.color="green";
		text = true;
	}
	else if(text == true){
		text2.style.color="";
		text = false;
	};
};
edit2.addEventListener("click", green);
/*Fonctionnalit√© 5 :
Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø.
Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher :
si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et
la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS.
Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).*/

//le href va √™tre supprimer
var danger = document.getElementsByClassName("navbar navbar-dark bg-dark box-shadow")[0];
var bootstrap = document.getElementsByTagName("link")[0];
function nuclear(){
	bootstrap.setAttribute("href", "")
};
danger.addEventListener("dblclick", nuclear);


// on rajoule href
var row = document.getElementsByClassName("text-white")[0];
function ravi2(){
	
	bootstrap.href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css";
}
row.addEventListener("dblclick", ravi2);
/*
Fonctionnalit√© 6 :
T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.

La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur
le bouton "View" d'une card (n'importe laquelle), celle-ci va se r√©duire.
Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20 % de
sa taille d'origine et les boutons "Edit" / "View" restent visibles.
Cette fonction sera r√©versible : s'il repasse sa souris, la card redevient normale !*/
var view = document.getElementsByClassName("btn btn-sm btn-success");
var image = document.getElementsByTagName("img");
var cards  = document.getElementsByClassName("card-text");
var reduire = false
for (let i = 0; i < 6; i++) {
	view[i].addEventListener("mouseover", function(){
			if (reduire == false) {
			cards[i].textContent="";
			image[i].style.width="20%";
			reduire =true;
	}
	else if(reduire == true){
	cards[i].textContent="L‚ÄôHyperText Markup Language, g√©n√©ralement abr√©g√© HTML, est le langage de balisage con√ßu pour repr√©senter les pages web"
	image[i].style.width=""
	reduire =false
	}
}
)
}

